# -*- coding: utf-8 -*-
"""appy.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wxnqQZKKPYT7jcewWtIfkOKkZfNULURx
"""

import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Function to preprocess input data
def preprocess_input(data):
    # Ensure the data is a DataFrame
    if not isinstance(data, pd.DataFrame):
        data = pd.DataFrame(data, index=[0])

    # Use LabelEncoder for categorical columns
    label_encoder = LabelEncoder()
    categorical_columns = ['Gender', 'EthnicGroup', 'ParentEduc', 'LunchType', 'TestPrep', 'ParentMaritalStatus', 'PracticeSport', 'IsFirstChild', 'TransportMeans']
    for col in categorical_columns:
        data[col] = label_encoder.fit_transform(data[col])

    return data

# Streamlit app layout
st.title("Math Score Prediction App")

# Load the pre-trained model
best_model_path = "best_model.pkl"
best_model = joblib.load(best_model_path)

# User input fields
gender = st.selectbox("Gender", ["Male", "Female"])
ethnic_group = st.selectbox("Ethnic Group", ["Group A", "Group B", "Group C", "Group D", "Group E"])
parent_educ = st.selectbox("Parent Education", ["Some College", "Bachelor's Degree", "Master's Degree", "Associate's Degree", "High School", "Some High School"])
lunch_type = st.selectbox("Lunch Type", ["Standard", "Free/Reduced"])
test_prep = st.selectbox("Test Preparation", ["Completed", "None"])
parent_marital_status = st.selectbox("Parent Marital Status", ["Married", "Divorced", "Single/Never Married"])
practice_sport = st.selectbox("Practice Sport", ["Yes", "No"])
is_first_child = st.selectbox("Is First Child", ["Yes", "No"])
transport_means = st.selectbox("Transport Means", ["Walk", "Bus", "Car", "Bike", "Public"])

wkly_study_hours = st.slider("Weekly Study Hours", 0, 30, 15)

# Create a dictionary with user input
user_input = {
    'Gender': gender,
    'EthnicGroup': ethnic_group,
    'ParentEduc': parent_educ,
    'LunchType': lunch_type,
    'TestPrep': test_prep,
    'ParentMaritalStatus': parent_marital_status,
    'PracticeSport': practice_sport,
    'IsFirstChild': is_first_child,
    'TransportMeans': transport_means,
    'WklyStudyHours': wkly_study_hours
}

def predict(data):
    # Assuming best_model is your trained model
    best_model.fit(X_train, y_train)
    prediction = best_model.predict(X_train)
    return prediction

# Convert the dictionary to a DataFrame
input_data = preprocess_input(user_input)

# Make prediction
prediction = predict(input_data)[0]

# Display prediction
st.success(f"Predicted Math Score: {prediction}")